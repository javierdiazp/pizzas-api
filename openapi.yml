openapi: 3.0.3
info:
  title: Pizzas API
  description: Pizzas API
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
    description: Development server
  - url: 'http://ec2-54-202-152-62.us-west-2.compute.amazonaws.com'
    description: Production server
paths:
  /stores:
    get:
      summary: Retrieve all stores
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
    post:
      summary: Create a store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '400':
          $ref: '#/components/responses/BadRequest'
  /stores/{store_id}:
    get:
      summary: Retrieve a store
      parameters:
        - $ref: '#/components/parameters/store_id'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a store
      parameters:
        - $ref: '#/components/parameters/store_id'
      responses:
        '204':
          description: Successful response
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a store
      parameters:
        - $ref: '#/components/parameters/store_id'
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /stores/{store_id}/products:
    get:
      summary: Retrieve all products in a store
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
  /stores/{store_id}/products/{product_id}:
    put:
      summary: Add a product to a store
      parameters:
        - $ref: '#/components/parameters/store_id'
        - $ref: '#/components/parameters/product_id'
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    delete:
      summary: Remove a product from a store
      parameters:
        - $ref: '#/components/parameters/store_id'
        - $ref: '#/components/parameters/product_id'
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /products:
    get:
      summary: Retrieve all products
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
  /products/{product_id}:
    get:
      summary: Retrieve a product
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a product
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        '204':
          description: Successful response
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a product
      parameters:
        - $ref: '#/components/parameters/product_id'
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /orders:
    get:
      summary: Retrieve all orders
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderWithProducts'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /orders/{order_id}:
    get:
      summary: Retrieve an order
      parameters:
        - $ref: '#/components/parameters/order_id'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an order
      parameters:
        - $ref: '#/components/parameters/order_id'
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /orders/{order_id}/products:
    get:
      summary: Retrieve all products in an order
      parameters:
        - $ref: '#/components/parameters/order_id'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    Store:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: My store
        address:
          type: string
          example: Main Street 123
        email:
          type: string
          example: example@mail.com
        phone:
          type: string
          example: 555-1234
        created_at:
          type: string
          format: date
          readOnly: true
          example: 2000-01-01
        updated_at:
          type: string
          format: date
          readOnly: true
          example: 2000-01-01
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: A product
        sku:
          type: string
          example: 9816248420
        type:
          type: string
          example: Pizza
        price:
          type: integer
          example: 20000
        created_at:
          type: string
          format: date
          readOnly: true
          example: 2000-01-01
        updated_at:
          type: string
          format: date
          readOnly: true
          example: 2000-01-01
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        store_id:
          type: integer
          example: 1
    OrderWithProducts:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            product_ids:
              type: array
              items:
                type: integer
              example: [ 1, 2 ]
    Error:
      type: object
      properties:
        message:
          type: string
          example: There was an error
  parameters:
    id:
      name: id
      in: path
      description: An object ID
      required: true
      schema:
        type: integer
        minimum: 1
      example: 1
    store_id:
      $ref: '#/components/parameters/id'
    product_id:
      $ref: '#/components/parameters/id'
    order_id:
      $ref: '#/components/parameters/id'
  responses:
    BadRequest:
      description: The request is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The resource would be in a conflicting state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'